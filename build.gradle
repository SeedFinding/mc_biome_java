plugins {
	id 'signing'
	id 'java-library'
	id 'maven-publish'
	id "idea"
	id "jacoco"
	id 'org.jetbrains.kotlin.jvm' version '1.5.31'
}

group = 'com.seedfinding'
archivesBaseName = project.name

defaultTasks 'clean', 'test'

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	withJavadocJar()
	withSourcesJar()
}

repositories {
	mavenCentral()
	// Use maven { url "https://maven.seedfinding.com" } for releases !
	maven { url "https://maven-snapshots.seedfinding.com" }
}

dependencies {
	implementation('com.seedfinding:mc_math:0eb505174da8a92550f8ec6efe254e0fa936cc0d') { transitive = false }
	implementation('com.seedfinding:mc_seed:5518e3ba3ee567fb0b51c15958967f70a6a19e02') { transitive = false }
	implementation('com.seedfinding:mc_core:acad44dfe78f25c2466d8f160dd9bf1777733371') { transitive = false }
	implementation('com.seedfinding:mc_noise:a6ab8e6c688491829f8d2adf845392da22ef8e9c') { transitive = false }

	testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
	testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")
	testImplementation('org.junit-pioneer:junit-pioneer:1.3.8')

	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
	testRuntimeOnly('org.junit.platform:junit-platform-console:1.7.1')
}

compileJava {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}


test {
	useJUnitPlatform {
		includeEngines("junit-jupiter")
		maxHeapSize = "1G"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		outputs.upToDateWhen { false }
		showStandardStreams = true
		showExceptions true
		showCauses true
		showStackTraces true
	}
	finalizedBy(jacocoTestReport)
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = "$project.name"
			from components.java
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = "$project.name"
				description = 'A dead simple library to simulate Minecraft biomes in pure Java'
				url = 'https://java.seedfinding.com/mcbiome'
				licenses {
					license {
						name = 'MIT License'
						url = 'https://opensource.org/licenses/MIT'
					}
				}
				developers {
					developer {
						id = 'hube12'
						name = 'Neil'
					}
					developer {
						id = 'kaptainwutax'
						name = 'KaptainWutax'
					}
				}
				scm {
					connection = 'scm:git:https://github.com/SeedFinding/mc_biome_java.git'
					developerConnection = 'scm:git:ssh://github.com/SeedFinding/mc_biome_java.git'
					url = 'https://github.com/SeedFinding/mc_biome_java'
				}
			}
		}
	}
	repositories {
		maven {
			def releasesRepoUrl = "https://nexus.seedfinding.com/service/rest/repository/browse/maven-seedfinding/com/seedfinding/mc_biome/"
			def snapshotsRepoUrl = "https://nexus.seedfinding.com/service/rest/repository/browse/maven-seedfinding-snapshots/com/seedfinding/mc_biome/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}

javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

signing {
	if (signing.getSignatory() == null) {
		System.err.println("Missing configuration driven signing key, defaulting to in memory.")
		def signingKeyId = findProperty("signingKeyId")
		def signingKey = findProperty("signingKey")
		def signingPassword = findProperty("signingPassword")
		if (signingKey == null || signingKey == null || signingPassword == null) {
			System.err.println("Missing in memory signing key, defaulting to agent.")
			useGpgCmd()
			def s= signing.getSignatory()
//			if (signing.getSignatory() == null || signing.getSignatory().getKeyId() == null) {
//				System.err.println("Missing GPG agent.")
//				gradle.taskGraph.whenReady { taskGraph ->
//					tasks.findAll { t ->
//						if (t.name == "signArchives") {
//							t.enabled(false)
//							System.err.println("No GPG signing agent, in memory or configuration driven GPG key were found, you can not use the sign method !")
//						}
//					}
//				}
//			}
		} else {
			useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
		}
	}
	gradle.taskGraph.whenReady { taskGraph ->
		tasks.findAll { t ->
			if (t.name == "signArchives") {
				if (t.enabled) {
					t.doLast {
						println "Signing was a success, congrats !"
					}
				}
			}
		}
	}
	sign publishing.publications.mavenJava
}

